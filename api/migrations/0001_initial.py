# Generated by Django 3.0 on 2020-01-02 20:55

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='DataType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('created', models.DateTimeField()),
            ],
            options={
                'db_table': 'data_types',
            },
        ),
        migrations.CreateModel(
            name='ElementType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'genomic_elements_types',
            },
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('created', models.DateTimeField(verbose_name='%Y-%m-%d')),
            ],
            options={
                'db_table': 'experiments',
            },
        ),
        migrations.CreateModel(
            name='Genome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('created', models.DateTimeField()),
            ],
            options={
                'db_table': 'genomes',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('color', models.CharField(max_length=255)),
                ('created', models.DateTimeField()),
                ('json', django.contrib.postgres.fields.jsonb.JSONField()),
            ],
            options={
                'db_table': 'groups',
            },
        ),
        migrations.CreateModel(
            name='GroupPerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField()),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Group')),
            ],
            options={
                'db_table': 'groups_persons',
            },
        ),
        migrations.CreateModel(
            name='GroupSample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField()),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Group')),
            ],
            options={
                'db_table': 'groups_samples',
            },
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('created', models.DateTimeField()),
            ],
            options={
                'db_table': 'keywords',
            },
        ),
        migrations.CreateModel(
            name='Organism',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('scientific_name', models.CharField(max_length=255)),
                ('created', models.DateTimeField()),
            ],
            options={
                'db_table': 'organisms',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('email', models.CharField(max_length=255)),
                ('api_key', models.CharField(max_length=64)),
                ('created', models.DateTimeField()),
                ('json', django.contrib.postgres.fields.jsonb.JSONField()),
                ('groups', models.ManyToManyField(through='api.GroupPerson', to='api.Group')),
            ],
            options={
                'db_table': 'persons',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('created', models.DateTimeField()),
            ],
            options={
                'db_table': 'roles',
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experiment_id', models.IntegerField()),
                ('name', models.CharField(max_length=255)),
                ('organism_id', models.IntegerField()),
                ('expression_type_id', models.IntegerField()),
                ('created', models.DateTimeField(verbose_name='%Y-%m-%d')),
                ('groups', models.ManyToManyField(through='api.GroupSample', to='api.Group')),
            ],
            options={
                'db_table': 'samples',
            },
        ),
        migrations.CreateModel(
            name='Set',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'sets',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('alt_name', models.CharField(max_length=255)),
                ('created', models.DateTimeField()),
            ],
            options={
                'db_table': 'tags',
            },
        ),
        migrations.CreateModel(
            name='TagKeywordSearch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField()),
                ('keyword', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Keyword')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Tag')),
            ],
            options={
                'db_table': 'tags_keywords_search',
            },
        ),
        migrations.CreateModel(
            name='TagType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'tag_types',
            },
        ),
        migrations.CreateModel(
            name='TrackType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'ucsc_track_types',
            },
        ),
        migrations.CreateModel(
            name='VFSFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parent_id', models.IntegerField()),
                ('name', models.CharField(max_length=255)),
                ('path', models.CharField(max_length=255)),
                ('type_id', models.IntegerField()),
                ('created', models.DateTimeField()),
                ('json', django.contrib.postgres.fields.jsonb.JSONField()),
            ],
            options={
                'db_table': 'vfs',
            },
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(max_length=255)),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Sample')),
                ('track_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.TrackType')),
            ],
            options={
                'db_table': 'ucsc_tracks',
            },
        ),
        migrations.CreateModel(
            name='TagSampleSearch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField()),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Sample')),
                ('tag_keyword_search', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.TagKeywordSearch')),
            ],
            options={
                'db_table': 'tags_samples_search',
            },
        ),
        migrations.CreateModel(
            name='SetSample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Sample')),
                ('set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Set')),
            ],
            options={
                'db_table': 'sets_samples',
            },
        ),
        migrations.CreateModel(
            name='SampleTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('str_value', models.CharField(max_length=255)),
                ('int_value', models.IntegerField()),
                ('float_value', models.FloatField()),
                ('created', models.DateTimeField()),
                ('json', django.contrib.postgres.fields.jsonb.JSONField()),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Sample')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Tag')),
                ('tag_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.TagType')),
            ],
            options={
                'db_table': 'sample_tags',
            },
        ),
        migrations.CreateModel(
            name='SamplePerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField()),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Person')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Sample')),
            ],
            options={
                'db_table': 'sample_persons',
            },
        ),
        migrations.CreateModel(
            name='SampleFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Sample')),
                ('vfs', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.VFSFile')),
            ],
            options={
                'db_table': 'sample_files',
            },
        ),
        migrations.AddField(
            model_name='sample',
            name='persons',
            field=models.ManyToManyField(through='api.SamplePerson', to='api.Person'),
        ),
        migrations.AddField(
            model_name='sample',
            name='sets',
            field=models.ManyToManyField(through='api.SetSample', to='api.Set'),
        ),
        migrations.AddField(
            model_name='groupsample',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Sample'),
        ),
        migrations.AddField(
            model_name='groupperson',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Person'),
        ),
        migrations.CreateModel(
            name='Element',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('path', models.CharField(max_length=255)),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Sample')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.ElementType')),
            ],
            options={
                'db_table': 'genomic_elements',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
